Index: src/CampManagementApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package TeamProject.src;\r\n\r\nimport TeamProject.src.model.Student;\r\nimport TeamProject.src.model.Subject;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class CampManagementApplication {\r\n    // 데이터 저장소\r\n    private static List<Student> studentStore; // 전체 학생 데이터 저장 List\r\n    private static List<Subject> subjectStore; // 과목 목록 생성용 List\r\n\r\n    // 과목 타입\r\n    private static String SUBJECT_TYPE_MANDATORY = \"MANDATORY\"; // 필수 과목 설정용 상수\r\n    private static String SUBJECT_TYPE_CHOICE = \"CHOICE\"; // 선택 과목 설정용 상수\r\n\r\n    // index 관리 필드\r\n    private static int studentIndex; // 학생용 인덱스\r\n    private static final String INDEX_TYPE_STUDENT = \"ST\";\r\n    private static int subjectIndex; // 과목용 인덱스\r\n    private static final String INDEX_TYPE_SUBJECT = \"SU\";\r\n    private static int scoreIndex; // 점수용 인덱스 (안 써도 될듯)\r\n    private static final String INDEX_TYPE_SCORE = \"SC\";\r\n\r\n    // 스캐너\r\n    private static Scanner sc = new Scanner(System.in);\r\n\r\n    // 실행시킬 메인 메서드\r\n    public static void main(String[] args) {\r\n        setInitData(); // 데이터 저장소들 생성 메서드\r\n        try {\r\n            // 여기부터\r\n            Student student1 = new Student(\"1\", \"김예찬\"); // 학생1 객체 생성\r\n            //student1.setSubjectList(subjectStore.get(0)); // 학생1의 수강 과목 입력\r\n            student1.setSubjectList(subjectStore.get(1));\r\n            student1.setSubjectList(subjectStore.get(2));\r\n            student1.getSubjectList().get(0).setScore(1, 80, 'C'); // 0번째 과목에 점수 입력\r\n            student1.getSubjectList().get(0).setScore(2, 92, 'B'); // 근데 학생의 과목별로 입력이 안되고 같이 입력되는 문제있음\r\n            student1.getSubjectList().get(1).setScore(1, 63, 'F'); // 현재 0번 과목(Java)에 1번 학생 점수랑 2번 학생 점수가 같이 저장됨\r\n            student1.getSubjectList().get(2).setScore(1, 74, 'D'); // 학생별로 SubjectList는 있으나 그 안에 객체가 공유되고 있는 상황인 것 같음\r\n\r\n            // 이렇게 과목을 넣을 때 Subject를 새로 생성하면 문제 해결되나 모든 학생이 수강 신청을 할 때마다\r\n            // 이렇게 생성을 하기에는 구조가 별로임\r\n            student1.setSubjectList(new Subject(\"SU9\", \"Java\", SUBJECT_TYPE_MANDATORY));\r\n\r\n\r\n            Student student2 = new Student(\"2\", \"노상윤\");\r\n            student2.setSubjectList(new Subject(\"SU10\", \"Java\", SUBJECT_TYPE_MANDATORY));\r\n            //student1.setSubjectList(subjectStore.get(0));\r\n            student2.setSubjectList(subjectStore.get(4));\r\n            student2.setSubjectList(subjectStore.get(5));\r\n            student2.getSubjectList().get(0).setScore(1, 81, 'C');\r\n            student2.getSubjectList().get(0).setScore(2, 76, 'D');\r\n            student2.getSubjectList().get(1).setScore(1, 99, 'A');\r\n            student2.getSubjectList().get(2).setScore(1, 90, 'B');\r\n\r\n            studentStore.add(student1); // 완성된 학생 정보를 전체 학생 List에 저장\r\n            studentStore.add(student2);\r\n\r\n            System.out.println(studentStore.get(1).getSubjectList().get(0).getScoreList().get(0)); // 2번 학생의 1회차 점수가 아닌 1번 학생의 1회차 점수가 나옴\r\n\r\n            // 입력 잘 되었는지 테스트용 출력\r\n            for (int i =0; i < studentStore.size(); i++) {\r\n                System.out.println(\"이름 : \" + studentStore.get(i).getStudentName());\r\n                System.out.println(\"아이디 : \" + studentStore.get(i).getStudentId());\r\n                for (int j =0; j < studentStore.get(i).getSubjectList().size(); j++) {\r\n                    System.out.println(\"수강중인 과목 : \" + studentStore.get(i).getSubjectList().get(j).getSubjectName());\r\n                    for (int k =0; k < studentStore.get(i).getSubjectList().get(j).getScoreList().size(); k++)\r\n                    System.out.println(studentStore.get(i).getSubjectList().get(j).getSubjectName() + \"의 \" + studentStore.get(i).getSubjectList().get(j).getScoreList().get(k));\r\n                }\r\n            }\r\n\r\n            // 과목 인덱스 번호 확인용 출력 (출력해보시려면 주석 풀어주세요)\r\n//            for (int i =0; i < subjectStore.size(); i++) {\r\n//                System.out.println(\"아이디 : \" + subjectStore.get(i).getSubjectId());\r\n//                System.out.println(\"이름 : \" + subjectStore.get(i).getSubjectName());\r\n//                System.out.println(\"타입 : \" + subjectStore.get(i).getSubjectType());\r\n//            }\r\n            // 여기까지 테스트용 데이터\r\n\r\n            displayMainView(); // 실제 로직이 담긴 메서드\r\n        } catch (Exception e) { // 예외처리\r\n            System.out.println(e);\r\n            System.out.println(\"\\n오류 발생!\\n프로그램을 종료합니다.\");\r\n        }\r\n    }\r\n\r\n    // 초기 데이터 생성\r\n    private static void setInitData() {\r\n        studentStore = new ArrayList<>(); // 전체 학생 정보를 담을 List를 초기화\r\n        subjectStore = List.of( // 과목별로 객체를 생성해서 전체 과목 List에 담아주기\r\n                new Subject(\r\n                        sequence(INDEX_TYPE_SUBJECT),\r\n                        \"Java\",\r\n                        SUBJECT_TYPE_MANDATORY\r\n                ),\r\n                new Subject(\r\n                        sequence(INDEX_TYPE_SUBJECT),\r\n                        \"객체지향\",\r\n                        SUBJECT_TYPE_MANDATORY\r\n                ),\r\n                new Subject(\r\n                        sequence(INDEX_TYPE_SUBJECT),\r\n                        \"Spring\",\r\n                        SUBJECT_TYPE_MANDATORY\r\n                ),\r\n                new Subject(\r\n                        sequence(INDEX_TYPE_SUBJECT),\r\n                        \"JPA\",\r\n                        SUBJECT_TYPE_MANDATORY\r\n                ),\r\n                new Subject(\r\n                        sequence(INDEX_TYPE_SUBJECT),\r\n                        \"MySQL\",\r\n                        SUBJECT_TYPE_MANDATORY\r\n                ),\r\n                new Subject(\r\n                        sequence(INDEX_TYPE_SUBJECT),\r\n                        \"디자인 패턴\",\r\n                        SUBJECT_TYPE_CHOICE\r\n                ),\r\n                new Subject(\r\n                        sequence(INDEX_TYPE_SUBJECT),\r\n                        \"Spring Security\",\r\n                        SUBJECT_TYPE_CHOICE\r\n                ),\r\n                new Subject(\r\n                        sequence(INDEX_TYPE_SUBJECT),\r\n                        \"Redis\",\r\n                        SUBJECT_TYPE_CHOICE\r\n                ),\r\n                new Subject(\r\n                        sequence(INDEX_TYPE_SUBJECT),\r\n                        \"MongoDB\",\r\n                        SUBJECT_TYPE_CHOICE\r\n                )\r\n        );\r\n    }\r\n\r\n    // index 자동 증가\r\n    private static String sequence(String type) {\r\n        switch (type) {\r\n            case INDEX_TYPE_STUDENT -> {\r\n                studentIndex++;\r\n                return INDEX_TYPE_STUDENT + studentIndex;\r\n            }\r\n            case INDEX_TYPE_SUBJECT -> {\r\n                subjectIndex++;\r\n                return INDEX_TYPE_SUBJECT + subjectIndex;\r\n            }\r\n            default -> {\r\n                scoreIndex++;\r\n                return INDEX_TYPE_SCORE + scoreIndex;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void displayMainView() throws InterruptedException {\r\n        boolean flag = true;\r\n        while (flag) {\r\n            System.out.println(\"\\n==================================\");\r\n            System.out.println(\"내일배움캠프 수강생 관리 프로그램 실행 중...\");\r\n            System.out.println(\"1. 수강생 관리\");\r\n            System.out.println(\"2. 점수 관리\");\r\n            System.out.println(\"3. 프로그램 종료\");\r\n            System.out.print(\"관리 항목을 선택하세요...\");\r\n            int input = sc.nextInt();\r\n\r\n            switch (input) {\r\n                case 1 -> displayStudentView(); // 수강생 관리\r\n                case 2 -> displayScoreView(); // 점수 관리\r\n                case 3 -> flag = false; // 프로그램 종료\r\n                default -> {\r\n                    System.out.println(\"잘못된 입력입니다.\\n되돌아갑니다!\");\r\n                    Thread.sleep(2000);\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"프로그램을 종료합니다.\");\r\n    }\r\n\r\n    private static void displayStudentView() {\r\n        boolean flag = true;\r\n        while (flag) {\r\n            System.out.println(\"==================================\");\r\n            System.out.println(\"수강생 관리 실행 중...\");\r\n            System.out.println(\"1. 수강생 등록\");\r\n            System.out.println(\"2. 수강생 목록 조회\");\r\n            System.out.println(\"3. 메인 화면 이동\");\r\n            System.out.print(\"관리 항목을 선택하세요...\");\r\n            int input = sc.nextInt();\r\n\r\n            switch (input) {\r\n                case 1 -> createStudent(); // 수강생 등록\r\n                case 2 -> inquireStudent(); // 수강생 목록 조회\r\n                case 3 -> flag = false; // 메인 화면 이동\r\n                default -> {\r\n                    System.out.println(\"잘못된 입력입니다.\\n메인 화면 이동...\");\r\n                    flag = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 수강생 등록 (상윤님 파트)\r\n    private static void createStudent() {\r\n        System.out.println(\"\\n수강생을 등록합니다...\");\r\n        System.out.print(\"수강생 이름 입력: \");\r\n        String studentName = sc.next();\r\n        // 기능 구현 (필수 과목, 선택 과목)\r\n\r\n        //Student student = new Student(sequence(INDEX_TYPE_STUDENT), studentName); // 수강생 인스턴스 생성 예시 코드\r\n        // 기능 구현\r\n        System.out.println(\"수강생 등록 성공!\\n\");\r\n    }\r\n\r\n    // 수강생 목록 조회 (승훈님 파트)\r\n    private static void inquireStudent() {\r\n        System.out.println(\"\\n수강생 목록을 조회합니다...\");\r\n        // 기능 구현\r\n        System.out.println(\"\\n수강생 목록 조회 성공!\");\r\n    }\r\n\r\n    private static void displayScoreView() {\r\n        boolean flag = true;\r\n        while (flag) {\r\n            System.out.println(\"==================================\");\r\n            System.out.println(\"점수 관리 실행 중...\");\r\n            System.out.println(\"1. 수강생의 과목별 시험 회차 및 점수 등록\");\r\n            System.out.println(\"2. 수강생의 과목별 회차 점수 수정\");\r\n            System.out.println(\"3. 수강생의 특정 과목 회차별 등급 조회\");\r\n            System.out.println(\"4. 메인 화면 이동\");\r\n            System.out.print(\"관리 항목을 선택하세요...\");\r\n            int input = sc.nextInt();\r\n\r\n            switch (input) {\r\n                case 1 -> createScore(); // 수강생의 과목별 시험 회차 및 점수 등록\r\n                case 2 -> updateRoundScoreBySubject(); // 수강생의 과목별 회차 점수 수정\r\n                case 3 -> inquireRoundGradeBySubject(); // 수강생의 특정 과목 회차별 등급 조회\r\n                case 4 -> flag = false; // 메인 화면 이동\r\n                default -> {\r\n                    System.out.println(\"잘못된 입력입니다.\\n메인 화면 이동...\");\r\n                    flag = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 조회용 학생 ID받아오는 메서드 (수정 X)\r\n    private static String getStudentId() {\r\n        System.out.print(\"\\n관리할 수강생의 번호를 입력하시오...\");\r\n        return sc.next();\r\n    }\r\n\r\n    // 수강생의 과목별 시험 회차 및 점수 등록 (효진님 파트)\r\n    private static void createScore() {\r\n        String studentId = getStudentId(); // 관리할 수강생 고유 번호\r\n        System.out.println(\"시험 점수를 등록합니다...\");\r\n        // 기능 구현\r\n        System.out.println(\"\\n점수 등록 성공!\");\r\n    }\r\n\r\n    // 수강생의 과목별 회차 점수 수정 (지우님 파트)\r\n    private static void updateRoundScoreBySubject() {\r\n        String studentId = getStudentId(); // 관리할 수강생 고유 번호\r\n        // 기능 구현 (수정할 과목 및 회차, 점수)\r\n        System.out.println(\"시험 점수를 수정합니다...\");\r\n        // 기능 구현\r\n        System.out.println(\"\\n점수 수정 성공!\");\r\n    }\r\n\r\n    // 수강생의 특정 과목 회차별 등급 조회 (예찬님 파트)\r\n    private static void inquireRoundGradeBySubject() {\r\n        String studentId = getStudentId(); // 관리할 수강생 고유 번호\r\n        // 기능 구현 (조회할 특정 과목)\r\n        System.out.println(\"회차별 등급을 조회합니다...\");\r\n        // 기능 구현\r\n        System.out.println(\"\\n등급 조회 성공!\");\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/CampManagementApplication.java b/src/CampManagementApplication.java
--- a/src/CampManagementApplication.java	(revision 2295b5f1a5c9384e6c503dd76a9c41bee1fcfab3)
+++ b/src/CampManagementApplication.java	(date 1714708407197)
@@ -39,7 +39,7 @@
             student1.getSubjectList().get(0).setScore(1, 80, 'C'); // 0번째 과목에 점수 입력
             student1.getSubjectList().get(0).setScore(2, 92, 'B'); // 근데 학생의 과목별로 입력이 안되고 같이 입력되는 문제있음
             student1.getSubjectList().get(1).setScore(1, 63, 'F'); // 현재 0번 과목(Java)에 1번 학생 점수랑 2번 학생 점수가 같이 저장됨
-            student1.getSubjectList().get(2).setScore(1, 74, 'D'); // 학생별로 SubjectList는 있으나 그 안에 객체가 공유되고 있는 상황인 것 같음
+            student1.getSubjectList().get(1).setScore(2, 74, 'D'); // 학생별로 SubjectList는 있으나 그 안에 객체가 공유되고 있는 상황인 것 같음
 
             // 이렇게 과목을 넣을 때 Subject를 새로 생성하면 문제 해결되나 모든 학생이 수강 신청을 할 때마다
             // 이렇게 생성을 하기에는 구조가 별로임
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_22\" default=\"true\" project-jdk-name=\"zulu-17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"jpab\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 2295b5f1a5c9384e6c503dd76a9c41bee1fcfab3)
+++ b/.idea/misc.xml	(date 1714708199899)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="zulu-17" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="openjdk-21" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
   <component name="ProjectType">
